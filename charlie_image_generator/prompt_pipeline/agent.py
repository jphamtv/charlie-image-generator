from google.adk.agents import SequentialAgent, LlmAgent

# --- 1. Define Sub-Agents for Each Pipeline Stage ---

# Prompt Writer Agent
# Takes the initial specification (from user query) and writes a prompt.
prompt_writer_agent = LlmAgent(
    name="PromptWriterAgent",
    model="gemini-1.5-flash",
    instruction="""You are a Prompt Generator.
Based *only* on the user's message, extract key words and write a prompt that fulfills the requirement.
If user's message is vague or non-descriptive, come up with a prompt that resembles one of the good prompt examples. 
Output *only* the complete prompt.
Do not add any other text before or after the prompt.
""",
    description="Writes initial prompt based on user's message.",
    output_key="generated_prompt",  # Stores output in state['generated_prompt]
)

# Prompt Reviewer Agent
# Takes the prompt generated by the previous agent (read from state) and provides feedback.
prompt_reviewer_agent = LlmAgent(
    name="PromptReviewerAgent",
    model="gemini-1.5-flash",
    instruction="""You are an expert Prompt Reviewer.
    Your task is to provide constructive feedback on the provided prompt.

    **Prompt to Review:**
    {generated_prompt}

**Review Criteria:**
1.  **Correctness:** Does the prompt work as intended? 
2.  **Readability:** Is the code clear and easy to understand? Follows PEP 8 style guidelines?
3.  **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?
4.  **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?
5.  **Best Practices:** Does the code follow common Python best practices?

**Output:**
Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.
If the prompt is excellent and requires no changes, simply state: "No major issues found."
Output *only* the review comments or the "No major issues" statement.
""",
    description="Reviews prompt and provides feedback.",
    output_key="review_comments",  # Stores output in state['review_comments']
)

# Prompt Refiner Agent
# Takes the original prompt and the review comments (read from state) and refines the prompt.
prompt_refiner_agent = LlmAgent(
    name="CodeRefinerAgent",
    model="gemini-2.0-flash",
    instruction="""You are a Prompt Refiner.
Your goal is to improve the given prompt based on the provided review comments.

  **Original Prompt:**
  {generated_prompt}

  **Review Comments:**
  {review_comments}

**Task:**
Carefully apply the suggestions from the review comments to refine the original prompt.
If the review comments state "No major issues found," return the original prompt unchanged.
Ensure the final prompt is complete.

**Output:**
Output *only* the final, refined prompt.
Do not add any other text before or after the prompt.
""",
    description="Refines prompt based on review comments.",
    output_key="refined_prompt",  # Stores output in state['refined_prompt']
)

# --- 2. Create the SequentialAgent ---

# This agent orchestrates the pipeline by running the sub_agents in order.
prompt_pipeline_agent = SequentialAgent(
    name="PromptPipelineAgent",
    sub_agents=[prompt_writer_agent, prompt_reviewer_agent, prompt_refiner_agent],
    description=("Executes a sequence of prompt writing, reviewing, and refining."),
    # The agents will run in the order provided: Writer -> Reviewer -> Refiner
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = prompt_pipeline_agent
