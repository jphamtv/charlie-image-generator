from google.adk.agents import SequentialAgent, LlmAgent

from . import prompt

GEMINI_FLASH_MODEL = "gemini-2.0-flash"

# --- 1. Define Sub-Agents for Each Pipeline Stage ---

# Prompt Writer Agent
# Takes the initial specification (from user query) and writes a prompt.
writer_agent = LlmAgent(
    name="prompt_writer",
    model=GEMINI_FLASH_MODEL,
    instruction=f"""You are a Prompt Writer.
        Based *only* on the user's message, extract key words and write a prompt that follows the Prompt Rules. 
        For examples of good prompt structure, refer to the Good Prompt Examples, but don't copy them exactly. Use them as inspiration.
        If user's message is vague or non-descriptive, come up with a prompt with same structure as one of the Good Prompt Examples.
        Flex your creativity and come up with a prompt that is unique and interesting.

        **Prompt Rules:**
        {prompt.PROMPT_RULES} 

        **Good Prompt Examples:**
        {prompt.GOOD_PROMPT_EXAMPLES} 

        Output *only* the complete prompt.
        Do not add any other text before or after the prompt.
        """,
    description="Writes initial prompt based on user's message.",
    output_key="initial_prompt",  # Stores output in state['initial_prompt]
)

# Prompt Reviewer Agent
# Takes the prompt generated by the previous agent (read from state) and provides feedback.
reviewer_agent = LlmAgent(
    name="prompt_reviewer",
    model=GEMINI_FLASH_MODEL,
    instruction=f"""You are an expert Prompt Reviewer.
        Your task is to provide constructive feedback on the provided prompt based on the Prompt Rules.
        Make sure the prompt makes sense. For example, the setting should be consistent with the prompt (e.g. soft window light does not make sense for outside setting).

        **Prompt Rules:**
        {prompt.PROMPT_RULES} 

        **Prompt to Review:**
        Read the prompt from the previous agent's output in the session state under 'initial_prompt'.

        **Output:**
        Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.
        If the prompt is excellent and requires no changes, simply state: "No major issues found."
        Output *only* the review comments or the "No major issues" statement.
        """,
    description="Reviews prompt and provides feedback.",
    output_key="review_feedback",  # Stores output in state['review_feedback']
)

# Prompt Refiner Agent
# Takes the original prompt and the review comments (read from state) and refines the prompt.
refiner_agent = LlmAgent(
    name="prompt_refiner",
    model=GEMINI_FLASH_MODEL,
    instruction=f"""You are a Prompt Refiner.
        Your goal is to improve the given prompt based on the provided review comments. 

        Make sure to refer to the Prompt Rules and Good Prompt Examples for reference.

        **Prompt Rules:**
        {prompt.PROMPT_RULES} 

        **Good Prompt Examples:**
        {prompt.GOOD_PROMPT_EXAMPLES} 

        **Task:**
        1. Read the original prompt from session state under 'initial_prompt'
        2. Read the review comments from session state under 'review_feedback'
        3. Carefully apply the suggestions from the review comments to refine the original prompt
        4. If the review comments state "No major issues found," return the original prompt unchanged
        5. Ensure the final prompt is complete

        **Output:**
        Output *only* the final, refined prompt.
        Do not add any other text before or after the prompt.
        """,
    description="Refines prompt based on review comments.",
    output_key="final_prompt",  # Stores output in state['final_prompt']
)

# --- 2. Create the SequentialAgent ---

# This agent orchestrates the pipeline by running the sub_agents in order.
prompt_pipeline_agent = SequentialAgent(
    name="prompt_pipeline_agent",
    sub_agents=[writer_agent, reviewer_agent, refiner_agent],
    description=("Executes a sequence of prompt writing, reviewing, and refining."),
    # The agents will run in the order provided: Writer -> Reviewer -> Refiner
    # Final result is available in state['final_prompt'] from the refiner_agent
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = prompt_pipeline_agent
