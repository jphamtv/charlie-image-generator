from google.adk.agents import SequentialAgent, LlmAgent
from google.adk.models.lite_llm import LiteLlm

from . import prompt

GEMINI_FLASH_MODEL = "gemini-2.0-flash"
ANTHROPIC_CLAUDE_SONNET_MODEL = "claude-sonnet-4-20250514"

# --- 1. Define Sub-Agents for Each Pipeline Stage ---

# Prompt Writer Agent
# Takes the initial specification (from user query) and writes a prompt.
writer_agent = LlmAgent(
    name="prompt_writer",
    # model=GEMINI_FLASH_MODEL,
    model=LiteLlm(model=ANTHROPIC_CLAUDE_SONNET_MODEL),
    instruction=f"""You are an expert Prompt Writer for CHRLE LoRA image generation.
        
        **Task:**
        Transform the user's request into a properly structured prompt following the Prompt Rules.
        
        **Approach:**
        - Extract key elements: action, setting, mood, style from user's message
        - If request is vague, make creative choices that align with user's intent
        - Use the template structure and medium hierarchy from the Prompt Rules
        - Reference the proven examples for inspiration, but create unique variations
        
        **Prompt Rules:**
        {prompt.PROMPT_RULES_WITH_EXAMPLES}
        
        **Output:**
        Generate only the complete prompt. No explanations or additional text.
        """,
    description="Writes initial prompt based on user's message.",
    output_key="initial_prompt",  # Stores output in state['initial_prompt]
)

# Prompt Reviewer Agent
# Takes the prompt generated by the previous agent (read from state) and provides feedback.
reviewer_agent = LlmAgent(
    name="prompt_reviewer",
    model=LiteLlm(model=ANTHROPIC_CLAUDE_SONNET_MODEL),
    instruction=f"""You are an expert Prompt Reviewer.
        
        **Task:**
        Review the prompt from 'initial_prompt' for adherence to the Prompt Rules and logical consistency.
        
        **Prompt Rules and Examples:**
        {prompt.PROMPT_RULES_ONLY}
        
        **Output Instructions:**
        If no major issues found simply output "No major issues found" with no additional text
        If issues are found output 2-4 specific, actionable bullet points with no additional text
        """,
    description="Reviews prompt and provides feedback.",
    output_key="review_feedback",  # Stores output in state['review_feedback']
)

# Prompt Refiner Agent
# Takes the original prompt and the review comments (read from state) and refines the prompt.
refiner_agent = LlmAgent(
    name="prompt_refiner",
    model=LiteLlm(model=ANTHROPIC_CLAUDE_SONNET_MODEL),
    instruction=f"""You are a Prompt Refiner.
        
        **Task:**
        Apply feedback from 'review_feedback' to improve the prompt from 'initial_prompt' while maintaining the original creative concept.
        
        **Process:**
        - If feedback is "No major issues found," return original prompt unchanged
        - Otherwise, apply specific suggestions using the Prompt Rules as reference
        - Preserve the core creative intent and mood
        
        **Prompt Rules:**
        {prompt.PROMPT_RULES_ONLY}
        
        **Output:**
        Only the refined prompt with no additional text.
        """,
    description="Refines prompt based on review comments.",
    output_key="final_prompt",  # Stores output in state['final_prompt']
)

# --- 2. Create the SequentialAgent ---

# This agent orchestrates the pipeline by running the sub_agents in order.
prompt_pipeline_agent = SequentialAgent(
    name="prompt_pipeline_agent",
    sub_agents=[writer_agent, reviewer_agent, refiner_agent],
    description=("Executes a sequence of prompt writing, reviewing, and refining."),
    # The agents will run in the order provided: Writer -> Reviewer -> Refiner
    # Final result is available in state['final_prompt'] from the refiner_agent
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = prompt_pipeline_agent
